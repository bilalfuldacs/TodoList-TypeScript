{"ast":null,"code":"var _jsxFileName = \"/Users/bilalahmad/Downloads/07-react-ts-starting-project/src/components/Todos.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from \"react\";\n// this todo now act as data type also not only as class but a data type also\nimport TodoListe from \"./TodoListe\";\nimport { TodosContext } from '../store/todos-context'; //noww i put items:todo to tell items is array of object which should have id and text\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Todos = props => {\n  _s();\n\n  //react.fc make it generic type whatever we paass props becoes like that\n  const TodoContext = useContext(TodosContext);\n  return (\n    /*#__PURE__*/\n    //after context you can remmove props and this all <{items:Todo[], deleteTodo:(inputext:string)=>void}>\n    _jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(TodoListe, {\n        items: TodoContext.items,\n        deleteTodo: TodoContext.deleteTodo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 5\n      }, this)\n    }, void 0, false)\n  );\n};\n\n_s(Todos, \"BgSWYdcdMW8qcAx86COesUiPbcs=\");\n\n_c = Todos;\nexport default Todos;\n\nvar _c;\n\n$RefreshReg$(_c, \"Todos\");","map":{"version":3,"names":["React","useContext","TodoListe","TodosContext","Todos","props","TodoContext","items","deleteTodo"],"sources":["/Users/bilalahmad/Downloads/07-react-ts-starting-project/src/components/Todos.tsx"],"sourcesContent":["import React, { Children, useContext } from \"react\";\nimport Todo from \"../models/todo\";// this todo now act as data type also not only as class but a data type also\nimport TodoListe from \"./TodoListe\";\nimport Classes from './Todos.module.css'\nimport {TodosContext} from '../store/todos-context'\n//noww i put items:todo to tell items is array of object which should have id and text\nconst Todos:React.FC<{items:Todo[], deleteTodo:(inputext:string)=>void}> =(props) =>{//react.fc make it generic type whatever we paass props becoes like that\n  const TodoContext=useContext(TodosContext);\n    return (\n//after context you can remmove props and this all <{items:Todo[], deleteTodo:(inputext:string)=>void}>\n    <>\n    <TodoListe items={TodoContext.items} deleteTodo={TodoContext.deleteTodo}/>\n    \n    </>\n  );\n}\n\nexport default Todos;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAA0BC,UAA1B,QAA4C,OAA5C;AACkC;AAClC,OAAOC,SAAP,MAAsB,aAAtB;AAEA,SAAQC,YAAR,QAA2B,wBAA3B,C,CACA;;;;;AACA,MAAMC,KAAkE,GAAGC,KAAD,IAAU;EAAA;;EAAC;EACnF,MAAMC,WAAW,GAACL,UAAU,CAACE,YAAD,CAA5B;EACE;IAAA;IACJ;IACI;MAAA,uBACA,QAAC,SAAD;QAAW,KAAK,EAAEG,WAAW,CAACC,KAA9B;QAAqC,UAAU,EAAED,WAAW,CAACE;MAA7D;QAAA;QAAA;QAAA;MAAA;IADA;EAFA;AAOH,CATD;;GAAMJ,K;;KAAAA,K;AAWN,eAAeA,KAAf"},"metadata":{},"sourceType":"module"}